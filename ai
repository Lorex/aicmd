#!/bin/bash

# Check configuration file
if [ ! -f ~/.aicmd/config ] || ! grep -q "^OPENAI_API_KEY=" ~/.aicmd/config || ! grep -q "^OPENAI_API_URL=" ~/.aicmd/config || ! grep -q "^OPENAI_MODEL=" ~/.aicmd/config; then
	echo "Configuration file is missing or corrupted. Running aicmd-conf to fix..."
	aicmd-conf set-key
	if [ $? -ne 0 ]; then
		echo "Failed to set up configuration. Please run 'aicmd-conf set-key' manually."
		exit 1
	fi
fi

# Load configuration
source ~/.aicmd/config

# Check if OPENAI_API_KEY is set
if [ -z "$OPENAI_API_KEY" ]; then
	echo "Error: OPENAI_API_KEY is not set. Please run 'aicmd-conf set-key' to set your API key."
	exit 1
fi

# Load configuration from config file
if [ -f ~/.aicmd/config ]; then
	source ~/.aicmd/config
	if [ -z "$OPENAI_API_URL" ]; then
		echo "Error: OpenAI API URL not found in ~/.aicmd/config"
		echo "Please run the installation script again to set up your configuration"
		exit 1
	fi
	if [ -z "$OPENAI_MODEL" ]; then
		echo "Error: OpenAI Model not found in ~/.aicmd/config"
		echo "Please run the installation script again to set up your configuration"
		exit 1
	fi
else
	echo "Error: Configuration file not found at ~/.aicmd/config"
	echo "Please run the installation script to set up your configuration"
	exit 1
fi

# Check if command contains [[UNSAFE]] tag
check_unsafe_tag() {
	if [[ "$*" == *"[[UNSAFE]]"* ]]; then
		echo "true"
	else
		echo "false"
	fi
}

# Remove [[UNSAFE]] tag from command
remove_unsafe_tag() {
	echo "$*" | sed 's/\[\[UNSAFE\]\]//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
}

# Error handling functions
handle_error() {
	local error_type=$1
	local message=$2
	local reason=""
	
	case $error_type in
		"UNSAFE")
			reason="Unsafe command detected, to use the command, please add \"[[UNSAFE]]\" in your prompt.
i.e. \"ai format disk\" -> \"ai format disk [[UNSAFE]]\" or \"[[UNSAFE]] ai format disk\""
			;;
		"EMPTY")
			reason="No command suggested."
			;;
		*)
			reason="Unknown error type."
			;;
	esac
	
	echo "> Command rejected: $reason"
	exit 1
}

handle_command() {
	local command=$1
	
	# Check for dangerous commands only if not in unsafe mode
	if [ "$IS_UNSAFE" != "true" ] && [[ "$command" =~ ^rm\ -rf\ /|^mkfs\.|^dd\ if=|^:\(\)\{\s*:\|^chmod\ 777|^chown\ root:|^mkfs\.|^dd\ if=|^mkfs\.|^dd\ if=|^mkfs\. ]]; then
		handle_error "UNSAFE" "Unsafe command detected"
	fi
	
	# Check for empty command
	if [ -z "$command" ]; then
		handle_error "EMPTY" "No command generated"
	fi
	
	# Display command and ask for confirmation
	echo "> Command: $command"
	read -p "> Execute? (y/n) " CONFIRM
	
	if [[ "$CONFIRM" = "y" || "$CONFIRM" = "Y" ]]; then
		bash -c "$command"
	else
		echo "> Cancelled."
		exit 0
	fi
}

if [ "$#" -eq 0 ]; then
	handle_error "EMPTY" "Please provide a prompt. Usage: $0 list files"
fi

ORIGINAL_PROMPT="$*"
IS_UNSAFE=$(check_unsafe_tag "$ORIGINAL_PROMPT")
CLEAN_PROMPT=$(remove_unsafe_tag "$ORIGINAL_PROMPT")

# Generate command
TEMP_FILE=$(mktemp)
echo "$CLEAN_PROMPT" > "$TEMP_FILE"
QUERY=$(jq -Rs . < "$TEMP_FILE")
rm "$TEMP_FILE"

REQUEST_JSON=$(jq -n \
	--arg model "$OPENAI_MODEL" \
	--arg content "$QUERY" \
	--arg unsafe "$IS_UNSAFE" \
	'{
		"model": $model,
		"messages": [
			{
				"role": "system",
				"content": "You are a Linux command generator. Follow these rules in order:\n1. If the command is dangerous (like rm -rf /, mkfs, dd, etc.) and unsafe=false, output \"::REJECTED:UNSAFE\"\n2. If unsafe=true, you may output any command including dangerous ones\n3. If no command can be suggested, output \"::REJECTED:EMPTY\"\n4. Output only the command without explanations"
			},
			{
				"role": "user",
				"content": ("intent: " + $content + "\nunsafe: " + $unsafe)
			}
		],
		"temperature": 0
	}')

RESPONSE=$(curl -s "$OPENAI_API_URL" \
	-H "Content-Type: application/json" \
	-H "Authorization: Bearer $OPENAI_API_KEY" \
	-d "$REQUEST_JSON")

COMMAND=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "::REJECTED:EMPTY"')

# Handle the response
if [[ "$COMMAND" == "::REJECTED:"* ]]; then
	handle_error "${COMMAND#::REJECTED:}" "Command rejected"
fi

handle_command "$COMMAND"
